# StudyBuddyWB ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ: рж╕ржорзНржкрзВрж░рзНржг ржХрзЛржб

# ржкрзНрж░ржержо ржЕржВрж╢: ржЗржоржкрзЛрж░рзНржЯ ржПржмржВ ржбрж╛ржЯрж╛
import sqlite3
import json
import random
import logging
import re
from typing import Dict, Optional
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from fuzzywuzzy import fuzz
from transformers import pipeline
import nest_asyncio
nest_asyncio.apply()

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ржбрж╛ржЯрж╛ржмрзЗрж╕ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи
def init_db():
    conn = sqlite3.connect('user_points.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS points (user_id INTEGER PRIMARY KEY, points INTEGER)''')
    c.execute('''CREATE TABLE IF NOT EXISTS feedback (user_id INTEGER, rating INTEGER, comment TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    c.execute('''CREATE TABLE IF NOT EXISTS study_partners (user_id INTEGER PRIMARY KEY, class_level TEXT, board TEXT, subjects TEXT, study_time TEXT)''')
    conn.commit()
    conn.close()

init_db()

# ржкржпрж╝рзЗржирзНржЯ ржпрзЛржЧ ржХрж░рж╛
def add_points(user_id: int, points: int):
    conn = sqlite3.connect('user_points.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO points (user_id, points) VALUES (?, COALESCE((SELECT points FROM points WHERE user_id = ?) + ?, ?))",
              (user_id, user_id, points, points))
    conn.commit()
    conn.close()

# ржлрж┐ржбржмрзНржпрж╛ржХ рж╕рзЗржн
def save_feedback(user_id: int, rating: Optional[int], comment: str):
    conn = sqlite3.connect('user_points.db')
    c = conn.cursor()
    c.execute("INSERT INTO feedback (user_id, rating, comment) VALUES (?, ?, ?)", (user_id, rating, comment))
    conn.commit()
    conn.close()

# рж╕рзНржЯрж╛ржбрж┐ ржкрж╛рж░рзНржЯржирж╛рж░ рж╕рзЗржн ржПржмржВ ржорзНржпрж╛ржЪрж┐ржВ
def save_study_partner(user_id: int, class_level: str, board: str, subjects: str, study_time: str):
    conn = sqlite3.connect('user_points.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO study_partners (user_id, class_level, board, subjects, study_time) VALUES (?, ?, ?, ?, ?)",
              (user_id, class_level, board, subjects, study_time))
    conn.commit()
    conn.close()

def find_study_partner(user_id: int, class_level: str, board: str, subjects: str) -> list:
    conn = sqlite3.connect('user_points.db')
    c = conn.cursor()
    c.execute("SELECT user_id, class_level, board, subjects, study_time FROM study_partners WHERE user_id != ? AND class_level = ? AND board = ?",
              (user_id, class_level, board))
    matches = c.fetchall()
    conn.close()
    return [m for m in matches if any(subj in m[3] for subj in subjects.split("-"))]

# ржбрж╛ржЯрж╛ (ржЗржиржЯрзЗржирзНржЯ, рж░рзЗрж╕ржкржирзНрж╕, ржХрзБржЗржЬ, ржЗрждрзНржпрж╛ржжрж┐)
intents_data = [
    {"intent": "greeting", "text": "рж╣рж╛ржЗ, рж╣рзНржпрж╛рж▓рзЛ, ржХрзЗржоржи ржЖржЫрзЛ"},
    {"intent": "quiz_query", "text": "ржХрзБржЗржЬ, ржХрзБржЗржЬ ржжрж╛ржУ, ржорзНржпрж╛рже ржХрзБржЗржЬ, рж╕рж╛ржпрж╝рзЗржирзНрж╕ ржХрзБржЗржЬ"},
    {"intent": "math_logic", "text": "ржорзНржпрж╛рже рж▓ржЬрж┐ржХ, рж▓ржЬрж┐ржХ ржкрзНрж░рж╢рзНржи"},
    {"intent": "doctor_career", "text": "ржбрж╛ржХрзНрждрж╛рж░ рж╣рждрзЗ ржЪрж╛ржЗ, ржбрж╛ржХрзНрждрж╛рж░рж┐ ржкржбрж╝рж╛"},
    {"intent": "neet_preparation", "text": "NEET ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи, NEET ржЯрж┐ржкрж╕"},
    {"intent": "jee_preparation", "text": "JEE ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи, JEE ржЯрж┐ржкрж╕"},
    {"intent": "upsc_preparation", "text": "UPSC ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи, UPSC ржЯрж┐ржкрж╕"},
    {"intent": "ssc_preparation", "text": "SSC ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи, SSC ржЯрж┐ржкрж╕"},
    {"intent": "ca_career", "text": "CA рж╣рждрзЗ ржЪрж╛ржЗ, ржЪрж╛рж░рзНржЯрж╛рж░рзНржб ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзНржпрж╛ржирзНржЯ"},
    {"intent": "gate_preparation", "text": "GATE ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи, GATE ржЯрж┐ржкрж╕"},
    {"intent": "nda_preparation", "text": "NDA ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи, NDA ржЯрж┐ржкрж╕"},
    {"intent": "rrb_group_d", "text": "RRB Group D ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи"},
    {"intent": "wbjee_preparation", "text": "WBJEE ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи, WBJEE ржЯрж┐ржкрж╕"},
    {"intent": "ssc_mts", "text": "SSC MTS ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи"},
    {"intent": "ctet_preparation", "text": "CTET ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржи, CTET ржЯрж┐ржкрж╕"},
    {"intent": "medical_duration", "text": "ржбрж╛ржХрзНрждрж╛рж░рж┐ ржкржбрж╝рждрзЗ ржХржд ржмржЫрж░ рж▓рж╛ржЧрзЗ"},
    {"intent": "medical_cost", "text": "ржбрж╛ржХрзНрждрж╛рж░рж┐ ржкржбрж╝рж╛рж░ ржЦрж░ржЪ"},
    {"intent": "doctor_specialization", "text": "ржбрж╛ржХрзНрждрж╛рж░рж┐ рж╕рзНржкрзЗрж╢рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи"},
    {"intent": "study_tip", "text": "ржкржбрж╝рж╛рж░ ржЯрж┐ржкрж╕, рж╕рзНржЯрж╛ржбрж┐ ржЯрж┐ржкрж╕"},
    {"intent": "smart_suggestion", "text": "ржкржбрж╝рж╛рж░ рж░рзБржЯрж┐ржи, рж╕рзНржорж╛рж░рзНржЯ рж╕рж╛ржЬрзЗрж╢ржи"},
    {"intent": "gk_query", "text": "ржЬрзЗржирж╛рж░рзЗрж▓ ржирж▓рзЗржЬ, GK"},
    {"intent": "dictionary", "text": "ржЕрж░рзНрже, рж╢ржмрзНржжрзЗрж░ ржЕрж░рзНрже"},
    {"intent": "wb_history", "text": "ржкрж╢рзНржЪрж┐ржоржмржЩрзНржЧрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕, ржмрж╛ржВрж▓рж╛рж░ ржЗрждрж┐рж╣рж╛рж╕"},
    {"intent": "psychology_fact", "text": "рж╕рж╛ржЗржХрзЛрж▓ржЬрж┐ ржлрзНржпрж╛ржХрзНржЯ, ржоржирж╕рзНрждрждрзНрждрзНржм"},
    {"intent": "relationship_advice", "text": "рж░рж┐рж▓рзЗрж╢ржирж╢рж┐ржк ржкрж░рж╛ржорж░рзНрж╢, рж╕ржорзНржкрж░рзНржХ"},
    {"intent": "study_partner", "text": "ржкржбрж╝рж╛рж░ ржкрж╛рж░рзНржЯржирж╛рж░, рж╕рзНржЯрж╛ржбрж┐ ржкрж╛рж░рзНржЯржирж╛рж░"},
    {"intent": "feedback", "text": "ржлрж┐ржбржмрзНржпрж╛ржХ, ржорждрж╛ржоржд"},
    {"intent": "share", "text": "рж╢рзЗржпрж╝рж╛рж░, ржмржирзНржзрзБржжрзЗрж░ ржмрж▓рзЛ"},
    {"intent": "joke", "text": "ржЬрзЛржХрж╕, ржоржЬрж╛рж░ ржЧрж▓рзНржк"},
    {"intent": "puzzle", "text": "ржкрж╛ржЬрж▓, ржзрж╛ржБржзрж╛"},
    {"intent": "poem", "text": "ржХржмрж┐рждрж╛, ржХржмрж┐рждрж╛ рж╢рзЛржирж╛ржУ"},
    {"intent": "book_suggestion", "text": "ржмржЗ рж╕рж╛ржЬрзЗрж╢ржи, ржмржЗржпрж╝рзЗрж░ ржирж╛ржо"},
    {"intent": "bodmas_calc", "text": "BODMAS, ржЕржВржХ ржХрж░рзЛ"},
    {"intent": "casual_chat", "text": "ржХрзА ржЦржмрж░, ржХрзА ржХрж░ржЫрж┐"},
    {"intent": "career_continue", "text": "ржЖрж░ржУ ржЬрж╛ржирждрзЗ ржЪрж╛ржЗ, ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░"},
]

responses = {
    "greeting": (
        "рж╣рж╛ржЗ! ржХрзЗржоржи ржЖржЫрзЛ? ЁЯШД\n"
        "ржХрзА ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓рждрзЗ ржЪрж╛ржУ?\n"
        "- ржкржбрж╝рж╛рж╢рзЛржирж╛рж░ ржЯрж┐ржкрж╕\n"
        "- ржХрзБржЗржЬ ржмрж╛ ржорзНржпрж╛рже рж▓ржЬрж┐ржХ\n"
        "- ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржЧрж╛ржЗржб\n"
        "- ржЬрзЛржХрж╕, ржХржмрж┐рждрж╛, ржкрж╛ржЬрж▓\n"
        "ржмрж▓рзЛ, ржХрзА ржЪрж╛ржУ?"
    ),
    "about_us": (
        "ржЖржорж┐ @StudyBuddyWB, MythraLux ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐! ЁЯШО\n"
        "ржнрж╛рж░рзНрж╕ржи: v1.0 Supreme\n"
        "ржЖржорж╛рж░ ржХрж╛ржЬ? рждрзЛржорж╛рж░ ржкржбрж╝рж╛рж╢рзЛржирж╛ ржЖрж░ ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ржХрзЗ рж╕рзБржкрж╛рж░ ржлрж╛ржи ржЖрж░ рж╕рж╣ржЬ ржХрж░рзЗ ржжрзЗржУржпрж╝рж╛!\n"
        "ржХрзА ржЪрж╛ржУ? /help ржжрж┐ржпрж╝рзЗ ржжрзЗржЦрзЛ!"
    ),
    "feedback": (
        "ржЖржорж╛ржХрзЗ ржХрзЗржоржи рж▓рж╛ржЧрж▓? ЁЯШК\n"
        "рзз ржерзЗржХрзЗ рзл ржПрж░ ржоржзрзНржпрзЗ рж░рзЗржЯрж┐ржВ ржжрж╛ржУ (рзз=ржЦрж╛рж░рж╛ржк, рзл=ржжрж╛рж░рзБржг)ред\n"
        "ржЕржержмрж╛ ржХрзЛржирзЛ ржорждрж╛ржоржд ржерж╛ржХрж▓рзЗ ржмрж▓рзЛ!"
    ),
    "share": (
        "ржЖржорж╛ржХрзЗ ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзЛ! ЁЯШД\n"
        "рж▓рж┐ржЩрзНржХ: t.me/StudyBuddyWB\n"
        "рждрзБржорж┐ рззрзж ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
    ),
    "neet_preparation": (
        "NEET ржкрзНрж░рж┐ржкрж╛рж░рзЗрж╢ржирзЗрж░ ржЬржирзНржп ржЯрж┐ржкрж╕:\n"
        "- NCERT ржмржЗ ржнрж╛рж▓рзЛ ржХрж░рзЗ ржкржбрж╝рзЛ, ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ ржмрж╛ржпрж╝рзЛрж▓ржЬрж┐ред\n"
        "- ржлрж┐ржЬрж┐ржХрзНрж╕рзЗ HC Verma ржЖрж░ DC Pandey ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржХрж░рзЛред\n"
        "- ржкрзНрж░рждрж┐ржжрж┐ржи рззрзжрзж-рззрзлрзж MCQ рж╕рж▓ржн ржХрж░рзЛред\n"
        "- ржоржХ ржЯрзЗрж╕рзНржЯ ржжрж┐ржпрж╝рзЗ рж╕ржоржпрж╝ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ рж╢рзЗржЦрзЛред\n"
        "ржЖрж░ржУ ржХрж┐ржЫрзБ ржЬрж╛ржирждрзЗ ржЪрж╛ржУ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
    ),
}

quiz_data = {
    "math": [
        {"question": "рзи + рзй * рзк = ?", "answer": "рззрзк"},
        {"question": "рззрзжрзж ржПрж░ рззрзл% ржХржд?", "answer": "рззрзл"},
    ],
    "science": [
        {"question": "ржкрж╛ржирж┐рж░ рж░рж╛рж╕рж╛ржпрж╝ржирж┐ржХ рж╕рзВрждрзНрж░ ржХрзА?", "answer": "H2O"},
        {"question": "ржЧрзНрж░рж╛ржнрж┐ржЯрж┐ ржЖржмрж┐рж╖рзНржХрж╛рж░ ржХрж░рзЗржи ржХрзЗ?", "answer": "ржирж┐ржЙржЯржи"},
    ],
    "gk": [
        {"question": "ржнрж╛рж░рждрзЗрж░ рж░рж╛ржЬржзрж╛ржирзА ржХрзА?", "answer": "ржжрж┐рж▓рзНрж▓рж┐"},
        {"question": "ржкрж╢рзНржЪрж┐ржоржмржЩрзНржЧрзЗрж░ рж░рж╛ржЬржзрж╛ржирзА ржХрзА?", "answer": "ржХрж▓ржХрж╛рждрж╛"},
    ],
}

physics_math_logic = [
    {"question": "рзй, рзм, рззрзи, рзирзк, ? ржкрж░рзЗрж░ рж╕ржВржЦрзНржпрж╛ ржХрзА?", "answer": "рзкрзо", "explanation": "ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржЖржЧрзЗрж░ржЯрж┐рж░ ржжрзНржмрж┐ржЧрзБржгред"},
    {"question": "ржПржХржЯрж┐ ржЧрж╛ржбрж╝рж┐ рзмрзж ржХрж┐ржорж┐/ржШржгрзНржЯрж╛ ржЧрждрж┐рждрзЗ рзй ржШржгрзНржЯрж╛ ржЪрж▓рзЗред ржжрзВрж░рждрзНржм ржХржд?", "answer": "рззрзорзж ржХрж┐ржорж┐", "explanation": "ржжрзВрж░рждрзНржм = ржЧрждрж┐ * рж╕ржоржпрж╝ = рзмрзж * рзй = рззрзорзж ржХрж┐ржорж┐ред"},
]

study_tips = [
    "ржкржбрж╝рж╛рж░ рж╕ржоржпрж╝ ржЫрзЛржЯ ржЫрзЛржЯ ржмрзНрж░рзЗржХ ржирж╛ржУ, ржпрзЗржоржи рзирзл ржорж┐ржирж┐ржЯ ржкржбрж╝рж╛, рзл ржорж┐ржирж┐ржЯ рж░рзЗрж╕рзНржЯред",
    "ржирзЛржЯ рждрзИрж░рж┐ ржХрж░рзЛ, ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╕рж╣ржЬ рж╣ржмрзЗред",
    "ржЧрзНрж░рзБржк рж╕рзНржЯрж╛ржбрж┐ ржХрж░рзЛ, ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ ржЖрж▓рзЛржЪржирж╛ ржоржЬрж╛рж░ред",
]

book_suggestions = {
    "class_10_wbbse": ["ржкрж╛ржарзНржпржкрзБрж╕рзНрждржХ (WBBSE)", "ржПржмрж┐рж╕рж┐ ржорзНржпрж╛ржерзЗржорзЗржЯрж┐ржХрзНрж╕", "ржлрж┐ржЬрж┐ржХрзНржпрж╛рж▓ рж╕рж╛ржпрж╝рзЗржирзНрж╕ (рж░рж╛ржпрж╝ ржПржирзНржб ржорж╛рж░рзНржЯрж┐ржи)"],
    "neet": ["NCERT Biology", "HC Verma Physics", "DC Pandey Objective Physics"],
    "jee": ["HC Verma Physics", "RD Sharma Mathematics", "NCERT Chemistry"],
}

wb_history_facts = [
    "ржкрж╢рзНржЪрж┐ржоржмржЩрзНржЧ рззрзпрзкрзн рж╕рж╛рж▓рзЗ ржнрж╛рж░ржд ржнрж╛ржЧрзЗрж░ рж╕ржоржпрж╝ ржЧржарж┐ржд рж╣ржпрж╝ред",
    "рж░ржмрзАржирзНржжрзНрж░ржирж╛рже ржарж╛ржХрзБрж░ ржкрж╢рзНржЪрж┐ржоржмржЩрзНржЧрзЗрж░ ржЧрж░рзНржм, рждрж┐ржирж┐ ржкрзНрж░ржержо ржирзЛржмрзЗрж▓ ржкрзБрж░рж╕рзНржХрж╛рж░ ржЬржпрж╝рзА ржнрж╛рж░рждрзАржпрж╝ред",
]

psychology_facts = [
    "ржорж╛ржирзБрж╖ ржжрж┐ржирзЗ ржЧржбрж╝рзЗ рзнрзж,рзжрзжрзж ржмрж╛рж░ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗред",
    "ржирзАрж▓ рж░ржЩ ржоржиржХрзЗ рж╢рж╛ржирзНржд ржХрж░рзЗред",
]

jokes = [
    "ржкрзНрж░рж╢рзНржи: ржорзНржпрж╛рже ржХрзЗржи ржХрж╛ржБржжрзЗ? ржЙрждрзНрждрж░: ржХрж╛рж░ржг рждрж╛рж░ ржЕржирзЗржХ рж╕ржорж╕рзНржпрж╛! ЁЯШЕ",
    "ржкрзНрж░рж╢рзНржи: ржХрзЛржи рж╕рзНржХрзБрж▓рзЗ ржнрзВржд ржкржбрж╝рзЗ? ржЙрждрзНрждрж░: ржнрзВржд ржмрж┐ржжрзНржпрж╛рж▓ржпрж╝! ЁЯС╗",
]

puzzles = [
    {"question": "ржЖржорж╛рж░ рзйржЯрж┐ ржорзБржЦ ржЖржЫрзЗ, ржХрж┐ржирзНрждрзБ ржЪрзЛржЦ ржирзЗржЗред ржЖржорж┐ ржХрзА?", "answer": "ржорзБржжрзНрж░рж╛"},
    {"question": "рзл, рззрзж, рзирзж, рзкрзж, ? ржкрж░рзЗрж░ рж╕ржВржЦрзНржпрж╛ ржХрзА?", "answer": "рзорзж"},
]

poems = [
    "ржЖржХрж╛рж╢рзЗ ржорзЗржШрзЗрж░ ржирж╛ржЪржи, ржоржирзЗрж░ ржХрзЛржгрзЗ рж╕рзНржмржкржиред",
    "ржиржжрзАрж░ ржХрж▓рждрж╛ржирзЗ, ржЬрзАржмржирзЗрж░ ржЧрж╛ржи ржмрж╛ржЬрзЗред",
]

dictionary = {
    "hope": "ржЖрж╢рж╛",
    "success": "рж╕рж╛ржлрж▓рзНржп",
    "study": "ржкржбрж╝рж╛рж╢рзЛржирж╛",
}

# NLP ржХрзНрж▓рж╛рж╕рж┐ржлрж╛ржпрж╝рж╛рж░
classifier = pipeline("zero-shot-classification", model="facebook/bart-large-mnli")

# ржжрзНржмрж┐рждрзАржпрж╝ ржЕржВрж╢: рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи ржПржмржВ ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
def save_context(user_id: int, context_data: Dict):
    try:
        with open(f'context_{user_id}.json', 'w', encoding='utf-8') as f:
            json.dump(context_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Error saving context for user {user_id}: {e}")

def load_context(user_id: int) -> Dict:
    try:
        with open(f'context_{user_id}.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"last_command": None, "last_topic": None, "current_quiz": None, "current_mathlogic": None, "awaiting_feedback": False, "awaiting_study_partner": False, "awaiting_book_suggestion": False, "awaiting_bodmas": False}
    except Exception as e:
        logger.error(f"Error loading context for user {user_id}: {e}")
        return {}

def detect_banglish(text: str) -> bool:
    banglish_pattern = re.compile(r'[a-zA-Z]+[a-zA-Z0-9]*')
    words = text.split()
    banglish_count = sum(1 for word in words if banglish_pattern.match(word))
    return banglish_count > len(words) / 2

def evaluate_bodmas(expression: str) -> str:
    try:
        result = eval(expression, {"__builtins__": {}}, {})
        explanation = (
            f"BODMAS ржЕржирзБржпрж╛ржпрж╝рзА:\n"
            f"- ржмрзНрж░рзНржпрж╛ржХрзЗржЯ ржкрзНрж░ржержорзЗ\n"
            f"- рждрж╛рж░ржкрж░ ржЕрж░рзНржбрж╛рж░ (ржпрзЗржоржи, ржкрж╛ржУржпрж╝рж╛рж░)\n"
            f"- рждрж╛рж░ржкрж░ ржбрж┐ржнрж┐рж╢ржи/ржорж╛рж▓рзНржЯрж┐ржкрзНрж▓рж┐ржХрзЗрж╢ржи (ржмрж╛ржБ ржерзЗржХрзЗ ржбрж╛ржирзЗ)\n"
            f"- рждрж╛рж░ржкрж░ ржЕрзНржпрж╛ржбрж┐рж╢ржи/рж╕рж╛ржмржЯрзНрж░рж╛ржХрж╢ржи\n"
            f"рждрзЛржорж╛рж░ ржЕржВржХ: {expression} = {result}"
        )
        return explanation
    except Exception as e:
        return f"ржжрзБржГржЦрж┐ржд, ржЕржВржХржЯрж╛ ржарж┐ржХ ржиржпрж╝ред ЁЯШЕ ржЙржжрж╛рж╣рж░ржг: рзи + рзй * рзк"

def get_user_tone(text: str) -> str:
    text = text.lower()
    if any(word in text for word in ["ржЪрж┐ржирзНрждрж┐ржд", "ржнржпрж╝", "рж╕ржорж╕рзНржпрж╛", "ржХржарж┐ржи"]):
        return "worried"
    elif any(word in text for word in ["ржЦрзБрж╢рж┐", "ржжрж╛рж░рзБржг", "ржнрж╛рж▓рзЛ", "ржЙрзОрж╕рж╛рж╣"]):
        return "excited"
    elif any(word in text for word in ["ржХрзА", "ржХрзЗржи", "ржХрзАржнрж╛ржмрзЗ", "?"]):
        return "curious"
    else:
        return "neutral"

def predict_intent(user_input: str) -> str:
    user_input = user_input.lower().strip()
    max_score = 0
    matched_intent = "unknown"
    for item in intents_data:
        score = fuzz.partial_ratio(user_input, item["text"].lower())
        if score > max_score and score > 85:
            max_score = score
            matched_intent = item["intent"]
    if matched_intent == "unknown":
        try:
            scores = classifier(user_input, candidate_labels=[item["intent"] for item in intents_data], multi_label=False)
            matched_intent = scores["labels"][0]
        except Exception as e:
            logger.error(f"Error in NLP prediction: {e}")
            matched_intent = "casual_chat"
    return matched_intent

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    add_points(user_id, 5)
    context_data = load_context(user_id)
    context_data["last_command"] = "start"
    save_context(user_id, context_data)
    welcome_message = (
        "рж╣рж╛ржЗ! ржЖржорж┐ @StudyBuddyWB, рждрзЛржорж╛рж░ ржкржбрж╝рж╛рж╢рзЛржирж╛рж░ ржмржирзНржзрзБ! ЁЯШО\n"
        "ржЖржорж┐ ржХрзА ржХрзА ржХрж░рждрзЗ ржкрж╛рж░рж┐?\n"
        "- ЁЯУЪ ржкржбрж╝рж╛рж░ ржЯрж┐ржкрж╕, рж░рзБржЯрж┐ржи, ржмржЗ рж╕рж╛ржЬрзЗрж╢ржи\n"
        "- ЁЯза ржХрзБржЗржЬ, ржорзНржпрж╛рже рж▓ржЬрж┐ржХ, ржкрж╛ржЬрж▓\n"
        "- ЁЯТ╝ ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржЧрж╛ржЗржб (NEET, JEE, UPSC, SSC...)\n"
        "- ЁЯШД ржЬрзЛржХрж╕, ржХржмрж┐рждрж╛, ржорзЛржЯрж┐ржнрзЗрж╢ржи\n"
        "- ЁЯСе ржкржбрж╝рж╛рж░ ржкрж╛рж░рзНржЯржирж╛рж░ ржЦрзБржБржЬрзЗ ржжрзЗржУржпрж╝рж╛\n"
        "ржХрзА ржЪрж╛ржУ? ржирж┐ржЪрзЗрж░ ржХржорж╛ржирзНржб ржЯрзНрж░рж╛ржЗ ржХрж░рзЛ ржмрж╛ ржмрж▓рзЛ:\n"
        "- /quiz: ржХрзБржЗржЬ ржирж╛ржУ\n"
        "- /help: рж╕рж╛рж╣рж╛ржпрзНржп\n"
        "- /about: ржЖржорж╛ржжрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗ\n"
        "- /feedback: ржорждрж╛ржоржд ржжрж╛ржУ\n"
        "- /share: ржмржирзНржзрзБржжрзЗрж░ ржмрж▓рзЛ\n"
        "рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
    )
    await update.message.reply_text(welcome_message)

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    add_points(user_id, 5)
    context_data = load_context(user_id)
    context_data["last_command"] = "help"
    save_context(user_id, context_data)
    help_message = (
        "ржЖржорж┐ рждрзЛржорж╛рж░ ржкржбрж╝рж╛рж╢рзЛржирж╛рж░ ржмржирзНржзрзБ! ЁЯШД ржПржЦрж╛ржирзЗ ржХржорж╛ржирзНржб:\n"
        "- /start: рж╢рзБрж░рзБ ржХрж░рзЛ\n"
        "- /quiz: ржХрзБржЗржЬ ржирж╛ржУ (ржорзНржпрж╛рже, рж╕рж╛ржпрж╝рзЗржирзНрж╕, GK)\n"
        "- /help: рж╕рж╛рж╣рж╛ржпрзНржп\n"
        "- /about: ржЖржорж╛ржжрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗ\n"
        "- /feedback: рж░рзЗржЯрж┐ржВ ржмрж╛ ржорждрж╛ржоржд ржжрж╛ржУ\n"
        "- /share: ржмржЯ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзЛ\n"
        "ржЕржирзНржп ржХрж┐ржЫрзБ ржЪрж╛ржУ? ржпрзЗржоржи:\n"
        "- ржкржбрж╝рж╛рж░ ржЯрж┐ржкрж╕\n"
        "- ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржЧрж╛ржЗржб (NEET, JEE, UPSC...)\n"
        "- ржЬрзЛржХрж╕, ржХржмрж┐рждрж╛, ржкрж╛ржЬрж▓\n"
        "ржмрж▓рзЛ, ржХрзА ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓ржм? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
    )
    await update.message.reply_text(help_message)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    add_points(user_id, 5)
    context_data = load_context(user_id)
    context_data["last_command"] = "about"
    save_context(user_id, context_data)
    await update.message.reply_text(responses["about_us"])

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    context_data = load_context(user_id)
    context_data["last_command"] = "feedback"
    context_data["awaiting_feedback"] = True
    save_context(user_id, context_data)
    add_points(user_id, 5)
    await update.message.reply_text(responses["feedback"])

async def share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    add_points(user_id, 10)
    context_data = load_context(user_id)
    context_data["last_command"] = "share"
    save_context(user_id, context_data)
    await update.message.reply_text(responses["share"])

# рждрзГрждрзАржпрж╝ + ржЪрждрзБрж░рзНрже ржЕржВрж╢: handle_message ржлрж╛ржВрж╢ржи
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_input = update.message.text.strip()
    logger.info(f"User {user_id} input: {user_input}")
    
    # ржмрж╛ржВрж▓рж┐рж╢ рж╢ржирж╛ржХрзНрждржХрж░ржг
    if detect_banglish(user_input):
        await update.message.reply_text(
            "ржжрзБржГржЦрж┐ржд, рждрзБржорж┐ ржоржирзЗ рж╣ржпрж╝ ржмрж╛ржВрж▓рж┐рж╢рзЗ рж▓рж┐ржЦрзЗржЫред ЁЯШЕ ржжржпрж╝рж╛ ржХрж░рзЗ ржмрж╛ржВрж▓рж╛ ржмрж╛ ржЗржВрж░рзЗржЬрж┐рждрзЗ рж▓рзЗржЦрзЛ, ржпрж╛рждрзЗ ржЖржорж┐ ржнрж╛рж▓рзЛ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐! ЁЯШК ржХрзА ржмрж▓рждрзЗ ржЪрж╛ржУ?"
        )
        add_points(user_id, 2)
        return
    
    # ржЗржЙржЬрж╛рж░ ржЯрзЛржи рж╢ржирж╛ржХрзНрждржХрж░ржг
    user_tone = get_user_tone(user_input)
    tone_response = ""
    if user_tone == "worried":
        tone_response = "ржЪрж┐ржирзНрждрж╛ ржХрж░рзЛ ржирж╛, ржЖржорж┐ рждрзЛржорж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржм! ЁЯШК "
    elif user_tone == "excited":
        tone_response = "ржжрж╛рж░рзБржг, рждрзЛржорж╛рж░ ржЙрзОрж╕рж╛рж╣ ржжрзЗржЦрзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ! ЁЯШО "
    elif user_tone == "curious":
        tone_response = "ржХрзМрждрзВрж╣рж▓рзА ржоржи? ржЪрж▓рзЛ, ржЬрзЗржирзЗ ржирж┐ржЗ! ЁЯШД "
    
    # ржХржиржЯрзЗржХрзНрж╕ржЯ рж▓рзЛржб
    context_data = load_context(user_id)
    
    # ржлрж┐ржбржмрзНржпрж╛ржХ ржорзЛржб
    if context_data.get("awaiting_feedback", False):
        rating_pattern = r'^\s*[1-5]\s*$'
        if re.match(rating_pattern, user_input):
            rating = int(user_input)
            save_feedback(user_idр▓╡р▓┐р▓╖р│Нр▓Хрж╛рж░рзЗ save_feedback(user_id, rating, "")
            context_data["awaiting_feedback"] = False
            save_context(user_id, context_data)
            await update.message.reply_text(
                f"ржзржирзНржпржмрж╛ржж {rating}/рзл рж░рзЗржЯрж┐ржВ ржжрзЗржУржпрж╝рж╛рж░ ржЬржирзНржп! ЁЯШК ржЖрж░ ржХрж┐ржЫрзБ ржмрж▓рждрзЗ ржЪрж╛ржУ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
            add_points(user_id, 5)
            return
        else:
            save_feedback(user_id, None, user_input)
            context_data["awaiting_feedback"] = False
            save_context(user_id, context_data)
            await update.message.reply_text(
                f"ржзржирзНржпржмрж╛ржж рждрзЛржорж╛рж░ ржорждрж╛ржорждрзЗрж░ ржЬржирзНржп! ЁЯШК '{user_input}' ржирзЛржЯ ржХрж░рж▓рж╛ржоред ржЖрж░ ржХрзА ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓рждрзЗ ржЪрж╛ржУ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
            add_points(user_id, 5)
            return
    
    # ржЗржиржЯрзЗржирзНржЯ ржкрзНрж░рзЗржбрж┐ржХрзНржЯ
    intent = predict_intent(user_input)
    logger.info(f"Predicted intent: {intent}")
    context_data["last_topic"] = intent
    save_context(user_id, context_data)
    
    # ржЗржиржЯрзЗржирзНржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
    if intent == "greeting":
        await update.message.reply_text(tone_response + responses["greeting"])
        add_points(user_id, 5)
    
    elif intent == "quiz_query":
        if context_data.get("current_quiz"):
            current_quiz = context_data["current_quiz"]
            if user_input.lower() == current_quiz["answer"].lower():
                response = (
                    "рж╢рж╛ржмрж╛рж╢! рж╕ржарж┐ржХ ржЙрждрзНрждрж░! ЁЯОЙ\n"
                    "ржЖрж░рзЗржХржЯрж╛ ржХрзБржЗржЬ ржЪрж╛ржУ? ржмрж▓рзЛ: ржорзНржпрж╛рже, рж╕рж╛ржпрж╝рзЗржирзНрж╕, ржмрж╛ ржЬрзЗржирж╛рж░рзЗрж▓ ржирж▓рзЗржЬред\n"
                    "рждрзБржорж┐ рззрзж ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                context_data["current_quiz"] = None
                add_points(user_id, 10)
            else:
                response = (
                    f"ржнрзБрж▓ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗред ЁЯШЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░: {current_quiz['answer']}ред\n"
                    "ржЖрж░рзЗржХржЯрж╛ ржХрзБржЗржЬ ржЪрж╛ржУ? ржмрж▓рзЛ: ржорзНржпрж╛рже, рж╕рж╛ржпрж╝рзЗржирзНрж╕, ржмрж╛ ржЬрзЗржирж╛рж░рзЗрж▓ ржирж▓рзЗржЬред"
                )
                context_data["current_quiz"] = None
                add_points(user_id, 2)
        else:
            quiz_type = None
            if any(word in user_input.lower() for word in ["ржорзНржпрж╛рже", "math"]):
                quiz_type = "math"
            elif any(word in user_input.lower() for word in ["рж╕рж╛ржпрж╝рзЗржирзНрж╕", "science"]):
                quiz_type = "science"
            elif any(word in user_input.lower() for word in ["ржЬрзЗржирж╛рж░рзЗрж▓ ржирж▓рзЗржЬ", "gk"]):
                quiz_type = "gk"
            if quiz_type and quiz_data.get(quiz_type):
                question = random.choice(quiz_data[quiz_type])
                context_data["current_quiz"] = question
                response = (
                    f"{tone_response}ржЪрж▓рзЛ, ржПржХржЯрж╛ {quiz_type} ржХрзБржЗржЬ! ЁЯШД\n"
                    f"ржкрзНрж░рж╢рзНржи: {question['question']}\n"
                    "ржЙрждрзНрждрж░ ржжрж╛ржУ! рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                add_points(user_id, 5)
            else:
                response = (
                    f"{tone_response}ржХрзБржЗржЬ ржирж┐рждрзЗ ржЪрж╛ржУ? ЁЯШД ржХрзЛржиржЯрж╛ ржЪрж╛ржУ?\n"
                    "- ржорзНржпрж╛рже\n"
                    "- рж╕рж╛ржпрж╝рзЗржирзНрж╕\n"
                    "- ржЬрзЗржирж╛рж░рзЗрж▓ ржирж▓рзЗржЬ\n"
                    "ржмрж▓рзЛ, ржХрзЛржиржЯрж╛ ржжрж┐ржм? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                add_points(user_id, 5)
        save_context(user_id, context_data)
        await update.message.reply_text(response)
    
    elif intent == "math_logic":
        if context_data.get("current_mathlogic"):
            current_logic = context_data["current_mathlogic"]
            if user_input.lower() == current_logic["answer"].lower():
                response = (
                    "ржжрж╛рж░рзБржг! рж╕ржарж┐ржХ ржЙрждрзНрждрж░! ЁЯОЙ\n"
                    f"ржмрзНржпрж╛ржЦрзНржпрж╛: {current_logic['explanation']}\n"
                    "ржЖрж░рзЗржХржЯрж╛ рж▓ржЬрж┐ржХ ржкрзНрж░рж╢рзНржи ржЪрж╛ржУ? рждрзБржорж┐ рззрзж ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                context_data["current_mathlogic"] = None
                add_points(user_id, 10)
            else:
                response = (
                    f"ржнрзБрж▓ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗред ЁЯШЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░: {current_logic['answer']}ред\n"
                    f"ржмрзНржпрж╛ржЦрзНржпрж╛: {current_logic['explanation']}\n"
                    "ржЖрж░рзЗржХржЯрж╛ ржкрзНрж░рж╢рзНржи ржЪрж╛ржУ? рждрзБржорж┐ рзи ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                context_data["current_mathlogic"] = None
                add_points(user_id, 2)
        else:
            logic = random.choice(physics_math_logic)
            context_data["current_mathlogic"] = logic
            response = (
                f"{tone_response}ржЪрж▓рзЛ, ржПржХржЯрж╛ ржорзНржпрж╛рже рж▓ржЬрж┐ржХ ржкрзНрж░рж╢рзНржи! ЁЯШО\n"
                f"ржкрзНрж░рж╢рзНржи: {logic['question']}\n"
                "ржЙрждрзНрждрж░ ржжрж╛ржУ! рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
            add_points(user_id, 5)
        save_context(user_id, context_data)
        await update.message.reply_text(response)
    
    elif intent in ["doctor_career", "neet_preparation", "jee_preparation", "upsc_preparation",
                    "ssc_preparation", "ca_career", "gate_preparation", "nda_preparation",
                    "rrb_group_d", "wbjee_preparation", "ssc_mts", "ctet_preparation",
                    "medical_duration", "medical_cost", "doctor_specialization"]:
        response = tone_response + responses.get(intent, "ржПржЗ ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржирж┐ржпрж╝рзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп рж╢рж┐ржЧржЧрж┐рж░ржЗ ржпрзЛржЧ ржХрж░ржм! ЁЯШК")
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "study_tip":
        tip = random.choice(study_tips)
        response = (
            f"{tone_response}ржкржбрж╝рж╛рж╢рзЛржирж╛ржпрж╝ ржоржи ржмрж╕рж╛рждрзЗ ржЪрж╛ржУ? ржПржЦрж╛ржирзЗ ржПржХржЯрж╛ ржЯрж┐ржкрж╕:\n"
            f"- {tip}\n"
            "ржЖрж░рзЗржХржЯрж╛ ржЯрж┐ржкрж╕ ржЪрж╛ржУ? ЁЯШД рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "smart_suggestion":
        suggestion = random.choice(book_suggestions["class_10_wbbse"])
        response = (
            f"{tone_response}ржкржбрж╝рж╛рж░ рж░рзБржЯрж┐ржи ржЪрж╛ржУ? ржПржЦрж╛ржирзЗ ржПржХржЯрж╛ ржЖржЗржбрж┐ржпрж╝рж╛:\n"
            f"- ржмржЗ рж╕рж╛ржЬрзЗрж╢ржи: {suggestion}\n"
            "- рж╕ржХрж╛рж▓ рзм-рзо: ржорзНржпрж╛рже ржмрж╛ рж╕рж╛ржпрж╝рзЗржирзНрж╕\n"
            "- ржжрзБржкрзБрж░ рзи-рзк: ржЗржВрж░рзЗржЬрж┐ ржмрж╛ ржмрж╛ржВрж▓рж╛\n"
            "- рж░рж╛ржд рзо-рззрзж: рж░рж┐ржнрж┐рж╢ржи\n"
            "рждрзЛржорж╛рж░ рж░рзБржЯрж┐ржи рж╢рзЗржпрж╝рж╛рж░ ржХрж░ржмрзЗ? ЁЯШК рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "gk_query":
        fact = random.choice(wb_history_facts)
        response = (
            f"{tone_response}ржЬрзЗржирж╛рж░рзЗрж▓ ржирж▓рзЗржЬ ржЪрж╛ржУ? ржПржЦрж╛ржирзЗ ржПржХржЯрж╛ ржлрзНржпрж╛ржХрзНржЯ:\n"
            f"- {fact}\n"
            "ржЖрж░рзЗржХржЯрж╛ ржЪрж╛ржУ? ржирж╛ржХрж┐ рждрзБржорж┐ ржкрзНрж░рж╢рзНржи ржХрж░ржмрзЗ? ЁЯШД рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "dictionary":
        word = user_input.lower().strip()
        meaning = dictionary.get(word, None)
        if meaning:
            response = (
                f"{tone_response}'{word}' ржПрж░ ржЕрж░рзНрже: {meaning}\n"
                "ржЖрж░рзЗржХржЯрж╛ рж╢ржмрзНржж ржЬрж╛ржирждрзЗ ржЪрж╛ржУ? ЁЯШК рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
        else:
            response = (
                f"{tone_response}ржжрзБржГржЦрж┐ржд, '{word}' ржЖржорж╛рж░ ржбрж┐ржХрж╢ржирж╛рж░рж┐рждрзЗ ржирзЗржЗред ЁЯШЕ\n"
                "ржЖрж░рзЗржХржЯрж╛ рж╢ржмрзНржж ржмрж▓рзЛ, ржмрж╛ржВрж▓рж╛ ржмрж╛ ржЗржВрж░рзЗржЬрж┐! рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "wb_history":
        fact = random.choice(wb_history_facts)
        response = (
            f"{tone_response}ржкрж╢рзНржЪрж┐ржоржмржЩрзНржЧрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржЬрж╛ржирждрзЗ ржЪрж╛ржУ? ржПржЦрж╛ржирзЗ ржПржХржЯрж╛ ржлрзНржпрж╛ржХрзНржЯ:\n"
            f"- {fact}\n"
            "ржЖрж░ржУ ржЬрж╛ржирждрзЗ ржЪрж╛ржУ? рж╕рзНржмрж╛ржзрзАржирждрж╛ ржЖржирзНржжрзЛрж▓ржи ржмрж╛ ржмрж┐ржЦрзНржпрж╛ржд ржмрзНржпржХрзНрждрж┐ ржирж┐ржпрж╝рзЗ ржмрж▓рждрзЗ ржкрж╛рж░рж┐! ЁЯШД рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "psychology_fact":
        fact = random.choice(psychology_facts)
        response = (
            f"{tone_response}рж╕рж╛ржЗржХрзЛрж▓ржЬрж┐ ржлрзНржпрж╛ржХрзНржЯ ржЪрж╛ржУ? ржПржЦрж╛ржирзЗ ржПржХржЯрж╛:\n"
            f"- {fact}\n"
            "ржЖрж░рзЗржХржЯрж╛ ржлрзНржпрж╛ржХрзНржЯ рж╢рзБржиржмрзЗ? ЁЯШК рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "relationship_advice":
        response = (
            f"{tone_response}рж░рж┐рж▓рзЗрж╢ржирж╢рж┐ржк ржирж┐ржпрж╝рзЗ ржЯрж┐ржкрж╕ ржЪрж╛ржУ? ЁЯШД ржПржЦрж╛ржирзЗ ржПржХржЯрж╛:\n"
            "- ржмржирзНржзрзБ ржмрж╛ ржлрзНржпрж╛ржорж┐рж▓рж┐рж░ рж╕рж╛ржерзЗ ржЦрзЛрж▓рж╛ржорзЗрж▓рж╛ ржХржерж╛ ржмрж▓рзЛ, ржнрзБрж▓ ржмрзЛржЭрж╛ржмрзБржЭрж┐ ржХржоржмрзЗред\n"
            "ржХрзЛржирзЛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржорж╕рзНржпрж╛ ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓рждрзЗ ржЪрж╛ржУ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "study_partner":
        if context_data.get("awaiting_study_partner"):
            try:
                class_level, board, subjects, study_time = user_input.split(",")
                save_study_partner(user_id, class_level.strip(), board.strip(), subjects.strip(), study_time.strip())
                matches = find_study_partner(user_id, class_level.strip(), board.strip(), subjects.strip())
                if matches:
                    match_list = "\n".join([f"User {m[0]}: ржХрзНрж▓рж╛рж╕ {m[1]}, ржмрзЛрж░рзНржб {m[2]}, рж╕рж╛ржмржЬрзЗржХрзНржЯ {m[3]}, рж╕ржоржпрж╝ {m[4]}" for m in matches])
                    response = (
                        f"{tone_response}рждрзЛржорж╛рж░ ржбрж┐ржЯрзЗржЗрж▓ рж╕рзЗржн ржХрж░рж▓рж╛ржо! ЁЯШК ржПржЦрж╛ржирзЗ ржорзНржпрж╛ржЪрж┐ржВ ржкрж╛рж░рзНржЯржирж╛рж░:\n"
                        f"{match_list}\n"
                        "ржХрж╛рж░рзЛ рж╕рж╛ржерзЗ ржХрж╛ржирзЗржХрзНржЯ ржХрж░рждрзЗ ржЪрж╛ржУ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                    )
                else:
                    response = (
                        f"{tone_response}рждрзЛржорж╛рж░ ржбрж┐ржЯрзЗржЗрж▓ рж╕рзЗржн ржХрж░рж▓рж╛ржо! ЁЯШК ржПржЦржирзЛ ржорзНржпрж╛ржЪрж┐ржВ ржкрж╛рж░рзНржЯржирж╛рж░ ржкрж╛ржЗржирж┐ред\n"
                        "ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗржХ ржХрж░рзЛред ржЖрж░ ржХрж┐ржЫрзБ ржЬрж╛ржирждрзЗ ржЪрж╛ржУ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                    )
                context_data["awaiting_study_partner"] = False
                add_points(user_id, 5)
            except ValueError:
                response = (
                    f"{tone_response}ржжрзБржГржЦрж┐ржд, ржбрж┐ржЯрзЗржЗрж▓ ржарж┐ржХ ржиржпрж╝ред ЁЯШЕ ржлрж░ржорзНржпрж╛ржЯ: ржХрзНрж▓рж╛рж╕,ржмрзЛрж░рзНржб,рж╕рж╛ржмржЬрзЗржХрзНржЯ,рж╕ржоржпрж╝\n"
                    "ржЙржжрж╛рж╣рж░ржг: рззрзж,WBBSE,ржорзНржпрж╛рже-рж╕рж╛ржпрж╝рзЗржирзНрж╕,рж╕ржирзНржзрзНржпрж╛ рзм-рзо\n"
                    "ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ! рждрзБржорж┐ рзи ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                add_points(user_id, 2)
        else:
            context_data["awaiting_study_partner"] = True
            response = (
                f"{tone_response}ржкржбрж╝рж╛рж░ ржкрж╛рж░рзНржЯржирж╛рж░ ржЪрж╛ржУ? ЁЯШД ржирж┐ржЪрзЗрж░ ржлрж░ржорзНржпрж╛ржЯрзЗ ржбрж┐ржЯрзЗржЗрж▓ ржжрж╛ржУ:\n"
                "- ржХрзНрж▓рж╛рж╕, ржмрзЛрж░рзНржб, рж╕рж╛ржмржЬрзЗржХрзНржЯ, ржкржбрж╝рж╛рж░ рж╕ржоржпрж╝\n"
                "ржЙржжрж╛рж╣рж░ржг: рззрзж,WBBSE,ржорзНржпрж╛рже-рж╕рж╛ржпрж╝рзЗржирзНрж╕,рж╕ржирзНржзрзНржпрж╛ рзм-рзо\n"
                "ржмрж▓рзЛ, рждрзЛржорж╛рж░ ржбрж┐ржЯрзЗржЗрж▓ ржХрзА? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
            add_points(user_id, 5)
        save_context(user_id, context_data)
        await update.message.reply_text(response)
    
    elif intent == "feedback":
        context_data["awaiting_feedback"] = True
        save_context(user_id, context_data)
        await update.message.reply_text(responses["feedback"])
        add_points(user_id, 5)
    
    elif intent == "share":
        await update.message.reply_text(responses["share"])
        add_points(user_id, 10)
    
    elif intent == "joke":
        joke = random.choice(jokes)
        response = (
            f"{tone_response}ржЪрж▓рзЛ, ржПржХржЯрж╛ ржЬрзЛржХрж╕ рж╢рзЛржирж╛ржЗ! ЁЯШЕ\n"
            f"- {joke}\n"
            "ржЖрж░рзЗржХржЯрж╛ рж╢рзБржиржмрзЗ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "puzzle":
        if context_data.get("current_puzzle"):
            current_puzzle = context_data["current_puzzle"]
            if user_input.lower() == current_puzzle["answer"].lower():
                response = (
                    "рж╢рж╛ржмрж╛рж╢! рж╕ржарж┐ржХ ржЙрждрзНрждрж░! ЁЯОЙ\n"
                    "ржЖрж░рзЗржХржЯрж╛ ржкрж╛ржЬрж▓ ржЪрж╛ржУ? рждрзБржорж┐ рззрзж ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                context_data["current_puzzle"] = None
                add_points(user_id, 10)
            else:
                response = (
                    f"ржнрзБрж▓ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗред ЁЯШЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░: {current_puzzle['answer']}ред\n"
                    "ржЖрж░рзЗржХржЯрж╛ ржкрж╛ржЬрж▓ ржЪрж╛ржУ? рждрзБржорж┐ рзи ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                context_data["current_puzzle"] = None
                add_points(user_id, 2)
        else:
            puzzle = random.choice(puzzles)
            context_data["current_puzzle"] = puzzle
            response = (
                f"{tone_response}ржЪрж▓рзЛ, ржПржХржЯрж╛ ржкрж╛ржЬрж▓ ржжрж┐ржЪрзНржЫрж┐! ЁЯШО\n"
                f"ржкрзНрж░рж╢рзНржи: {puzzle['question']}\n"
                "ржЙрждрзНрждрж░ ржжрж╛ржУ! рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
            add_points(user_id, 5)
        save_context(user_id, context_data)
        await update.message.reply_text(response)
    
    elif intent == "poem":
        poem = random.choice(poems)
        response = (
            f"{tone_response}ржПржХржЯрж╛ ржХржмрж┐рждрж╛ рж╢рзЛржирзЛ! ЁЯМЯ\n"
            f"- {poem}\n"
            "ржЖрж░рзЗржХржЯрж╛ ржХржмрж┐рждрж╛ ржЪрж╛ржУ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "book_suggestion":
        if context_data.get("awaiting_book_suggestion"):
            book_key = user_input.lower().replace(" ", "_")
            books = book_suggestions.get(book_key, None)
            if books:
                book_list = "\n".join([f"- {book}" for book in books])
                response = (
                    f"{tone_response}рждрзЛржорж╛рж░ ржЬржирзНржп ржмржЗ рж╕рж╛ржЬрзЗрж╢ржи:\n"
                    f"{book_list}\n"
                    "ржЖрж░ржУ рж╕рж╛ржЬрзЗрж╢ржи ржЪрж╛ржУ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                context_data["awaiting_book_suggestion"] = False
                add_points(user_id, 5)
            else:
                response = (
                    f"{tone_response}ржжрзБржГржЦрж┐ржд, ржПржЗ ржХрзНрж▓рж╛рж╕/ржкрж░рзАржХрзНрж╖рж╛рж░ ржЬржирзНржп рж╕рж╛ржЬрзЗрж╢ржи ржирзЗржЗред ЁЯШЕ\n"
                    "ржЖрж░рзЗржХржЯрж╛ ржХрзНрж▓рж╛рж╕ ржмрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржмрж▓рзЛ (ржпрзЗржоржи, class_10_wbbse, neet)ред рждрзБржорж┐ рзи ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
                )
                add_points(user_id, 2)
        else:
            context_data["awaiting_book_suggestion"] = True
            response = (
                f"{tone_response}ржХрзЛржи ржХрзНрж▓рж╛рж╕ ржмрж╛ ржкрж░рзАржХрзНрж╖рж╛рж░ ржЬржирзНржп ржмржЗ ржЪрж╛ржУ? ЁЯШК\n"
                "ржЙржжрж╛рж╣рж░ржг: class_10_wbbse, neet, jee\n"
                "ржмрж▓рзЛ, ржХрзЛржиржЯрж╛? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
            add_points(user_id, 5)
        save_context(user_id, context_data)
        await update.message.reply_text(response)
    
    elif intent == "bodmas_calc":
        if context_data.get("awaiting_bodmas"):
            result = evaluate_bodmas(user_input)
            response = (
                f"{tone_response}{result}\n"
                "ржЖрж░рзЗржХржЯрж╛ ржЕржВржХ ржжрж┐ржмрзЗ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
            context_data["awaiting_bodmas"] = False
            add_points(user_id, 5)
        else:
            context_data["awaiting_bodmas"] = True
            response = (
                f"{tone_response}ржПржХржЯрж╛ BODMAS ржЕржВржХ ржжрж╛ржУ, ржЖржорж┐ рж╣рж┐рж╕рж╛ржм ржХрж░рзЗ ржжрзЗржм! ЁЯШД\n"
                "ржЙржжрж╛рж╣рж░ржг: рзи + рзй * рзк\n"
                "рждрзЛржорж╛рж░ ржЕржВржХ ржмрж▓рзЛ! рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
            add_points(user_id, 5)
        save_context(user_id, context_data)
        await update.message.reply_text(response)
    
    elif intent == "career_continue":
        last_topic = context_data.get("last_topic", "")
        if last_topic in responses:
            response = (
                f"{tone_response}ржЖрж░ржУ ржЬрж╛ржирждрзЗ ржЪрж╛ржУ? ржжрж╛рж░рзБржг! ЁЯШК ржХрзА ржирж┐ржпрж╝рзЗ ржнрж╛ржмржЫрзЛ?\n"
                f"- ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржЯрж┐ржкрж╕\n"
                f"- ржмржЗ рж╕рж╛ржЬрзЗрж╢ржи\n"
                f"- ржЦрж░ржЪ ржмрж╛ рж╕рзНржХрж▓рж╛рж░рж╢рж┐ржк\n"
                "ржмрж▓рзЛ, ржХрзЛржиржЯрж╛? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
        else:
            response = (
                f"{tone_response}ржХрзЛржи ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓рждрзЗ ржЪрж╛ржУ? ЁЯШК\n"
                "- NEET, JEE, UPSC, SSC, CA...\n"
                "ржмрж▓рзЛ, ржХрзЛржиржЯрж╛? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
            )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    elif intent == "casual_chat":
        response = (
            f"{tone_response}ржЖрж░рзЗ, ржХрзА ржЦржмрж░? ЁЯШО\n"
            "- ржХрзА ржХрж░ржЫрзЛ? ржкржбрж╝рж╛рж╢рзЛржирж╛, ржирж╛ржХрж┐ ржоржЬрж╛?\n"
            "ржЧрж▓рзНржк ржХрж░рждрзЗ ржЪрж╛ржУ? рждрзБржорж┐ рзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 5)
        await update.message.reply_text(response)
    
    else:
        response = (
            f"{tone_response}ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржарж┐ржХ ржмрзБржЭрждрзЗ ржкрж╛рж░рж▓рж╛ржо ржирж╛ред ЁЯШЕ\n"
            "ржХрзА ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓рждрзЗ ржЪрж╛ржУ? ржпрзЗржоржи:\n"
            "- ржкржбрж╝рж╛рж░ ржЯрж┐ржкрж╕\n"
            "- ржХрзБржЗржЬ ржмрж╛ ржорзНржпрж╛рже рж▓ржЬрж┐ржХ\n"
            "- ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржЧрж╛ржЗржб (NEET, JEE...)\n"
            "- ржЬрзЛржХрж╕, ржХржмрж┐рждрж╛\n"
            "ржмрж▓рзЛ, ржХрзА ржЪрж╛ржУ? рждрзБржорж┐ рзи ржкржпрж╝рзЗржирзНржЯ ржкрзЗрж▓рзЗ! ЁЯМЯ"
        )
        add_points(user_id, 2)
        await update.message.reply_text(response)

# ржкржЮрзНржЪржо ржЕржВрж╢: ржорзЗржЗржи ржлрж╛ржВрж╢ржи ржПржмржВ ржПрж░рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.message:
        await update.message.reply_text(
            "ржжрзБржГржЦрж┐ржд, ржХрж┐ржЫрзБ ржПржХржЯрж╛ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ЁЯШЕ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ ржмрж╛ /help ржжрж┐ржпрж╝рзЗ ржжрзЗржЦрзЛ!"
        )

def main():
    
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("about", about))
    application.add_handler(CommandHandler("feedback", feedback))
    application.add_handler(CommandHandler("share", share))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    logger.info("Starting bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
  
